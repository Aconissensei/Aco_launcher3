name: Launcher Build
on:
  push:
    branches: [ master ]

jobs:
  # 1) Crée/MAJ la release avec le tag = version du package.json
  create-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - name: Get version from package.json
        id: get_version
        run: echo "version=$(jq -r .version package.json)" >> $GITHUB_OUTPUT

      - name: Create/Update Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          name: release ${{ steps.get_version.outputs.version }}
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 2) Build sur chaque OS (sans publication)
  build-launcher:
    needs: create-release
    strategy:
      matrix:
        os: [windows-latest, macos-14, ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      # Dépendance requise pour AppImage sur Ubuntu (24.04+)
      - name: Install libfuse for AppImage (Linux only)
        if: matrix.os == 'ubuntu-latest'
        run: |
          set -e
          sudo apt-get update
          if apt-cache show libfuse2t64 >/dev/null 2>&1; then
            sudo apt-get install -y libfuse2t64
          else
            sudo apt-get install -y libfuse2
          fi

      - name: Install deps
        run: npm ci

      # ---- Build par OS (pas de publish !) ----
      - name: Build app (Windows)
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: npm run build:ci

      - name: Build app (macOS / Linux)
        if: matrix.os != 'windows-latest'
        run: npm run build

      # Garder les fichiers produits dans ./dist/
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.os }}
          path: dist/**/*
          if-no-files-found: error

  # 3) Attache tous les artifacts à la release
  attach-assets:
    needs: [create-release, build-launcher]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Attach files to Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.create-release.outputs.version }}
          files: artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
